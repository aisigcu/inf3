

(defglobal ?*nod-gen* = 0)
(defglobal ?*f* = 1)

(deffunction misplaced (?x ?y ?bum ?lamp ?wx ?wy) 
	(bind ?misp 0)
	(bind ?misp (manhattan (?x ?y ?wx ?wy)))
	(bind ?i 0)
	(while TRUE do
   	 (if (>= ?i 3) then
     	  (break))
   	 (if (<> (nth? (* 4 ?i) ?lamp ) 0 ) then (* 2 (manhattan(nth$ 2))
   	 (bind ?i (+ ?i 1)))
 	 
	(if (<> (nth$ 2 ?lamp)  1) then  (bind ?misp (+ ?misp 1)))
	(if (<> (nth$ 2 ?state)  2) then  (bind ?misp (+ ?misp 1)))
	(if (<> (nth$ 3 ?state)  3) then  (bind ?misp (+ ?misp 1)))
	(if (<> (nth$ 4 ?state)  8) then  (bind ?misp (+ ?misp 1)))
	;; (if (<> (nth$ 5 ?state)  0) then  (bind ?misp (+ ?misp 1)));;
	(if (<> (nth$ 6 ?state)  4) then  (bind ?misp (+ ?misp 1)))
	(if (<> (nth$ 7 ?state)  7) then  (bind ?misp (+ ?misp 1)))
	(if (<> (nth$ 8 ?state)  6) then  (bind ?misp (+ ?misp 1)))
	(if (<> (nth$ 9 ?state)  5) then  (bind ?misp (+ ?misp 1)))
       ?misp)

(deffunction control (?x ?y ?bum ?lamp ?wx ?wy ?level)
    (bind ?*f* (misplaced ?x ?y ?bum ?lamp ?wx ?wy))
    (bind ?*f* (+ ?*f* ?level 1))
)
(deffunction manhattan (?x ?y ?wx ?wy)
(bind ?ret 0)
	(bind ?ret (+ abs(- ?x ?wx) abs(- ?y ?wy)) )

?ret)


(deffacts bulb-robot
	(grid 5 4)
	(wh 2 3)
	(max-bulb 3)
	(robot 1 3 0 lamp 3 4 3 lamp 4 2 2 lamp 5 4 2 level 0))
(defrule right
	(declare (salience (- 0 ?*f*)))
	(robot ?x ?y ?bum $?lam level ?l)
	(grid ?c ?v)
	(test (< ?x ?c))
        (wh ?wx ?wy)
	(test (control (+ ?x 1) ?y ?bum $?lam ?wx ?wy ?l))
	=>
	(assert (robot (+ ?x 1) $?y level (+ ?l 1))))
(defrule left
	(declare (salience (- 0 ?*f*)))
	(robot ?x ?y ?bum $?lam level ?l)
	(grid ?c ?v)
	(test (> ?x 1))
	(wh ?wx ?wy)
	(test (control (create$ robot (- ?x 1) ?y ?bum $?lam ?wx ?wy ?l))
	=>
	(assert (robot (- ?x 1) ?y $?p level (+ ?l 1))))
(defrule up
	(declare (salience (- 0 ?*f*)))
	(robot ?x ?y ?bum $?lam level ?l)
	(grid ?c ?v)
	(test (< ?y ?v))
	(wh ?wx ?wy)
	(test (control (create$ robot ?x (+ ?y 1) ?bum $?lam ?wx ?wy ?l))
	=>
	(assert (robot ?x (+ ?y 1)  $?p level (+ ?l 1))))
(defrule down
	(declare (salience (- 0 ?*f*)))
	(robot ?x ?y ?bum $?lam level ?l)
	(grid ?c ?v)
	(test (> ?y 1))
	(wh ?wx ?wy)	
	(test (control (create$ robot ?x (- ?y 1) ?bum $?lam ?wx ?wy ?l))
	=>
	(assert (robot ?x (- ?y 1) $?p level (+ ?l 1))))
(defrule reload
	(declare (salience (- 0 ?*f*)))
	(robot ?x ?y ?bum $?lam lamp ?t ?h ?u $?m level ?l)
	(wh ?e ?r)
	(test( = ?x ?e))
	(test(= ?y ?r))
	(wh ?wx ?wy)
	(test (control (create$ robot (?x ?y ?u $?lam lamp ?t ?h ?u $?m )?wx ?wy ?l))
	=>
	(assert (robot ?x ?y ?u $?p lamp ?t ?h ?u $?m level (+ ?l 1)) ))
(defrule change
	(declare (salience (- 0 ?*f*)))
	(robot ?x ?y ?bum $?p lamp ?t ?h ?u $?m level ?l)
	(test (= ?x ?t))
	(test (= ?y ?h))
	(test (> ?bum 0))
	(test (>= ?bum ?u))
	(wh ?wx ?wy)
	(test (control (create$ robot (?x ?y (- ?bum ?u) $?p lamp ?t ?h 0 $?m  ) ?wx ?wy ?l))
	=>
	(assert (robot ?x ?y (- ?k ?u) $?p lamp ?t ?h 0 $?m level (+ ?l 1)) ))
(defrule objective
 	(declare (salience 100))	
	(robot ?x ?y ?k lamp ?a ?b 0 lamp ?c ?d 0 lamp ?e ?f 0 level ?l)
=>
	(printout t "SOLUTION FOUND AT LEVEL " ?l crlf)

	(halt))
(deffunction start ()
	(set-salience-evaluation when-activated)
        (reset)
	(printout t "Maximum depth:= " )
	(bind ?prof (read))
	(printout t "Search strategy " crlf "    1.- Breadth" crlf "    2.- 	Depth" crlf )
	(bind ?a (read))
	(if (= ?a 1)
	       then    (set-strategy breadth)
	       else   (set-strategy depth))
        (printout t " Execute run to start the program " crlf)
	
	(assert (max-depth ?prof))
	
)

	
