

(deffacts bulb-robot
	(grid 5 4)
	(wh 2 3)
	(max-bulb 3)
	(robot 1 3 0 lamp 3 4 3 lamp 4 2 2 lamp 5 4 2 level 0))
(defrule right
	(robot ?x ?y ?bum $?lam level ?l)
	(grid ?c ?v)
	(test (< ?x ?c))
        
	=>
	(assert (robot (+ ?x 1) ?y ?bum $?lam level (+ ?l 1))))
(defrule left
	(robot ?x ?y ?bum $?lam level ?l)
	(grid ?c ?v)
	(test (> ?x 1))
	
	=>
	(assert (robot (- ?x 1) ?y ?bum $?lam level (+ ?l 1))))
(defrule up
	(robot ?x ?y ?bum $?lam level ?l)
	(grid ?c ?v)
	(test (< ?y ?v))
	
	=>
	(assert (robot ?x (+ ?y 1) ?bum $?lam level (+ ?l 1))))
(defrule down
	(robot ?x ?y ?bum $?lam level ?l)
	(grid ?c ?v)
	(test (> ?y 1))
	(wh ?wx ?wy)	
	=>
	(assert (robot ?x (- ?y 1) ?bum $?lam level (+ ?l 1))))
(defrule reload
	(robot ?x ?y ?bum $?lam lamp ?t ?h ?u $?m level ?l)
	(wh ?x ?y)
	
	=>
	(assert (robot ?x ?y ?u $?lam lamp ?t ?h ?u $?m level (+ ?l 1)) ))
(defrule change
	(robot ?x ?y ?bum $?p lamp ?t ?h ?u $?m level ?l)
	(test (= ?x ?t))
	(test (= ?y ?h))
	(test (> ?bum 0))
	(test (>= ?bum ?u))
	
	=>
	(assert (robot ?x ?y (- ?bum ?u) $?p  $?m level (+ ?l 1)) ))
(defrule objective
 	(declare (salience 100))	
	(robot ?x ?y ?k level ?l)
=>
	(printout t "SOLUTION FOUND AT LEVEL " ?l crlf)

	(halt))
(deffunction start ()
	(set-salience-evaluation when-activated)
        (reset)
	(printout t "Maximum depth:= " )
	(bind ?prof (read))
	(printout t "Search strategy " crlf "    1.- Breadth" crlf "    2.- 	Depth" crlf )
	(bind ?a (read))
	(if (= ?a 1)
	       then    (set-strategy breadth)
	       else   (set-strategy depth))
        (printout t " Execute run to start the program " crlf)
	
	(assert (max-depth ?prof))
	
)
